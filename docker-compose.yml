services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: warehouse_app
    restart: unless-stopped
    env_file: .env
    ports:
      - "${APP_PORT}:${APP_EXPOSED_PORT}"
    volumes:
      - ./app:/warehouse/app
      - ./alembic:/warehouse/alembic
    depends_on:
      - db
    #      redis:
    #        condition: service_healthy
    #      kafka:
    #        condition: service_healthy
    networks:
      - warehouse_network
    stop_grace_period: 1s

  db:
    image: postgres:17-alpine
    container_name: warehouse_db
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_EXPOSED_PORT}"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 2s
      retries: 5
    networks:
      - warehouse_network

#  redis:
#    image: redis:8-alpine
#    container_name: warehouse_redis
#    ports:
#      - "${REDIS_PORT}:${REDIS_EXPOSED_PORT}"
#    volumes:
#      - redis_data:/data
#    networks:
#      - warehouse_network
#
#  zookeeper:
#    image: confluentinc/cp-zookeeper:7.6.1
#    container_name: zookeeper
#    ports:
#      - "${ZOOKEEPER_PORT}:${ZOOKEEPER_EXPOSED_PORT}"
#    environment:
#      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_EXPOSED_PORT}
#      ZOOKEEPER_TICK_TIME: 2000
#    networks:
#      - warehouse_network
#
#  kafka:
#    image: confluentinc/cp-kafka:7.6.1
#    container_name: kafka
#    depends_on:
#      - zookeeper
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
#      KAFKA_DELETE_TOPIC_ENABLE: "true"
#    networks:
#      - warehouse_network
#
#  kafka-ui:
#    image: provectuslabs/kafka-ui:v1.2.0
#    container_name: kafka-ui
#    ports:
#      - "${KAFKA_UI_PORT}:${KAFKA_UI_EXPOSED_PORT}"
#    environment:
#      KAFKA_CLUSTERS_0_NAME: local
#      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
#    depends_on:
#      - kafka
#    networks:
#      - warehouse_network

#  prometheus:
#    image: prom/prometheus:v2.52.2
#    container_name: prometheus
#    ports:
#      - "${PROMETHEUS_PORT}:${PROMETHEUS_EXPOSED_PORT}"
#    volumes:
#      - ./prometheus.yml:/etc/prometheus/prometheus.yml
#    command:
#      - '--config.file=/etc/prometheus/prometheus.yml'
#    networks:
#      - warehouse_network
#
#  grafana:
#    image: grafana/grafana:11.3.2
#    container_name: grafana
#    ports:
#      - "${GRAFANA_PORT}:${GRAFANA_EXPOSED_PORT}"
#    volumes:
#      - grafana_data:/var/lib/grafana
#    environment:
#      - GF_USERS_ALLOW_SIGN_UP=false
#    depends_on:
#      - prometheus
#    networks:
#      - warehouse_network

volumes:
  postgres_data:
#  redis_data:
#  grafana_data:

networks:
  warehouse_network:
    driver: bridge
